"""Найти количество компонент связности неориентированного графа при помощи поиска в глубину.
Формат входных данных:На вход подаётся описание графа. В первой строке указаны два натуральных числа,
разделенные пробелом: число вершин
v ≤1000 v≤1000 и число рёбер e≤1000e≤1000. В следующих ee строках содержатся описания рёбер.
Каждое ребро задаётся разделённой пробелом парой номеров вершин, которые это ребро соединяет.
Считается, что вершины графа пронумерованы числами от 1 до
vv.Формат выходных данных:Одно число — количество компонент связности графа."""


vershina,rebra = map(int, input().split())
#создаем граф с помощью списка смежности
graf = [[] for _ in range(vershina+1)]
#заполняем граф
for i in range(rebra):
    a, b = map(int, input().split())
    graf[a].append(b)
    graf[b].append(a)
# создаем список для отслеживания посещенных вершин
sprcok_versin=[0]* (vershina+1)

def dfs(step):
    """функция поиска в глубину"""
    sprcok_versin[step] = 1
    for j in graf[step]:
        if sprcok_versin[j] == 0:
            dfs(j)

rez = 0
# проходим по всем вершинам графа
for i in range(1, vershina+1):
    # если вершина не посещена, то вызываем функцию поиска в глубину
    if sprcok_versin[i] == 0:
        rez += 1
        dfs(i)

print(rez)